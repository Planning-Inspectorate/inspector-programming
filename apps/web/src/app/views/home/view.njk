{% extends "views/layouts/main.njk" %}

{% from "govuk/components/table/macro.njk" import govukTable %}
{% from "govuk/components/checkboxes/macro.njk" import govukCheckboxes %}
{% from "govuk/components/select/macro.njk" import govukSelect %}
{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/details/macro.njk" import govukDetails %}
{% from "govuk/components/error-summary/macro.njk" import govukErrorSummary %}
{% from "govuk/components/date-input/macro.njk" import govukDateInput %}
{% from "govuk/components/input/macro.njk" import govukInput %}
{% from "govuk/components/tabs/macro.njk" import govukTabs %}
{% from "govuk/components/pagination/macro.njk" import govukPagination %}
{% from "govuk/components/summary-list/macro.njk" import govukSummaryList %}
{% from "govuk/components/pagination/macro.njk" import govukPagination %}

{% from "views/home/map/map.njk" import map %}

{% block pageContent %}
<div class="filter-container">
    <div class="app-filter">
        <div class="app-filter__header">
            <div class="app-filter__header-title">
                <h2 class="govuk-heading-m bold-title">Select inspector</h2>
            </div>
        </div>
        <form method="post" novalidate>
            <div class="govuk-form-group flex-gap">
                {% set inspectorList = [{
                    text: '',
                    value: null,
                    selected: null
                }] %}
                {% for i in inspectors %}
                    {% set inspectorList = (inspectorList.push({
                        text: i.lastName + ', ' + i.firstName,
                        value: i.id,
                        selected: i.id == data.inspectorId
                    }), inspectorList) %}
                {% endfor %}
                {{ govukSelect({
                    id: "inspectors",
                    name: "inspectorId",
                    items: inspectorList
                }) }}
                {{ govukButton({
                    text: "Select",
                    classes: "govuk-button--secondary",
                    value: "select",
                    name: "action",
                    type: "submit"
                }) }}
            </div>
        </form>
        <div class="app-filter__content">
            <div class="app-filter__options">
                <form method="get" novalidate>
                    <input type="hidden" name="inspectorId" value="{{ data.inspectorId }}">
                    <input type="hidden" name="limit" value="{{ data.limit }}">
                    <input type="hidden" name="page" value="{{ data.page }}">

                    {% for key, value in data.filters %}
                        {% if value is iterable and not value is string %}
                            {% for item in value %}
                                <input type="hidden" name="filters[{{ key }}][]" value="{{ item }}">
                            {% endfor %}
                        {% else %}
                            <input type="hidden" name="filters[{{ key }}]" value="{{ value }}">
                        {% endif %}
                    {% endfor %}
                                
                </form>
                <div class="app-filter__header">
                    <div class="app-filter__header-title">
                        <h2 class="govuk-heading-m">Case filters</h2>
                    </div>
                </div>
                <form id="filter-form" method="get" novalidate>
                    {% if errorList.length %}
                        {{ govukErrorSummary({
                        titleText: "Filters could not be applied",
                        errorList: errorList
                        }) }}
                    {% endif %}
                    <button class="govuk-button" data-module="govuk-button">
                        Apply filters
                    </button>
                    {{ govukDetails({
                        summaryText: "Case age",
                        html: ( 
                                govukInput({
                                label: {
                                    text: "Minimum age (weeks)",
                                    classes: "govuk-label--s",
                                    isPageHeading: false
                                },
                                idPrefix: "filters[minimumAge]",
                                name: "filters[minimumAge]",
                                classes: "govuk-input--width-5",
                                errorMessage: errors.minimumAge,
                                value: data.filters.minimumAge
                                }) + 
                                govukInput({
                                    label: {
                                        text: "Maximum age (weeks)",
                                        classes: "govuk-label--s",
                                        isPageHeading: false
                                    },
                                    idPrefix: "filters[maximumAge]",
                                    name: "filters[maximumAge]",
                                    classes: "govuk-input--width-5",
                                    errorMessage: errors.maximumAge,
                                    value: data.filters.maximumAge
                                })

                        ),
                        classes: "custom-filter-dropdown",
                        open: true
                    }) }}
                    {{ govukDetails({
                        summaryText: "Procedure",
                        html: govukCheckboxes({
                            idPrefix: "filters[caseProcedure]",
                            name: "filters[caseProcedure]",
                            classes: "govuk-checkboxes--small",
                            fieldset: {
                                legend: {
                                    text: "Select one or more procedures",
                                    classes: "govuk-fieldset__legend--s"
                                }
                            },
                            items: [
                                { value: 'Written reps', text: 'Written representations' },
                                { value: 'Hearing', text: 'Hearing' },
                                { value: 'Inquiry', text: 'Inquiry' }
                            ],
                            values: data.filters.caseProcedure
                        }),
                        classes: "custom-filter-dropdown",
                        open: true
                    }) }}
                    {{ govukDetails({
                        summaryText: "LPA region",
                        html: govukCheckboxes({
                            idPrefix: "filters[lpaRegion]",
                            name: "filters[lpaRegion]",
                            classes: "govuk-checkboxes--small",
                            fieldset: {
                                legend: {
                                    text: "Select one or more LPA regions",
                                    classes: "govuk-fieldset__legend--s"
                                }
                            },
                            items: [
                                { value: 'North', text: 'North' },
                                { value: 'East', text: 'East' },
                                { value: 'West', text: 'West' }
                            ],
                            values: data.filters.lpaRegion
                        }),
                        classes: "custom-filter-dropdown",
                        open: true
                    }) }}
                    {{ govukDetails({
                        summaryText: "Case type",
                        html: govukCheckboxes({
                            idPrefix: "filters[caseType]",
                            name: "filters[caseType]",
                            classes: "govuk-checkboxes--small",
                            fieldset: {
                                legend: {
                                    text: "Select one or more case types",
                                    classes: "govuk-fieldset__legend--s"
                                }
                            },
                            items: caseTypes,
                            values: data.filters.caseType
                        }),
                        classes: "custom-filter-dropdown",
                        open: true
                    }) }}
                    {{ govukDetails({
                        summaryText: "Specialism",
                        html: govukCheckboxes({
                            idPrefix: "filters[caseSpecialisms]",
                            name: "filters[caseSpecialisms]",
                            classes: "govuk-checkboxes--small",
                            fieldset: {
                                legend: {
                                    text: "Select one or more specialisms",
                                    classes: "govuk-fieldset__legend--s"
                                }
                            },
                            items: specialisms,
                            values: data.filters.caseSpecialisms
                        }),
                        classes: "custom-filter-dropdown",
                        open: true
                    }) }}

                    {{ govukDetails({
                        summaryText: "Specialism code",
                        html: govukCheckboxes({
                            idPrefix: "filters[allocationLevel]",
                            name: "filters[allocationLevel]",
                            classes: "govuk-checkboxes--small",
                            fieldset: {
                                legend: {
                                    text: "Select one or more specialism codes",
                                    classes: "govuk-fieldset__legend--s"
                                }
                            },
                            items: specialismTypes,
                            values: data.filters.allocationLevel
                        }),
                        classes: "custom-filter-dropdown",
                        open: true
                    }) }}
                    <input type="hidden" name="inspectorId" value="{{ data.inspectorId }}">
                    <input type="hidden" name="limit" value="{{ data.limit }}">
                    <input type="hidden" name="page" value="{{ data.page }}">
                    <input type="hidden" name="sort" value="{{ data.sort }}">
                </form>
            </div>
        </div>
    </div>
<div class="cases-inspectors-container">
    <div id="table-view" class="view">
        {% set casesTable %}
        <div style="margin: 0; padding: 0;">
            <form id="sort-pagination-form" method="get" class="govuk-form-group" style="margin: 0; padding: 0;">  
                <div style="margin-bottom: 10px;">
                    <span class="govuk-body" style="margin-right: 10px;">Sort by:</span>
                    {% set sorts = [
                        { label: "Age", value: "age" },
                        { label: "Distance", value: "distance" },
                        { label: "Hybrid", value: "hybrid" }
                    ] %}
                    {% for s in sorts %}
                        <a data-sort="{{ s.value }}"
                            href=''
                            class="sort-pagination-link {% if data.sort == s.value %} selected govuk-body govuk-!-font-weight-bold{% else %}govuk-link govuk-link--no-visited-state{% endif %}">
                            {{ s.label }}
                        </a>{% if not loop.last %} | {% endif %}
                    {% endfor %}
                </div>
                    <br>
                        <div style="margin-bottom: 20px;">
                            <span class="govuk-body" style="margin-right: 10px;">Cases per page:</span>
                            {% set limits = [5, 10, 15, 25] %}
                            {% for l in limits %}
                                <a  data-limit="{{ l }}"
                                    href=''
                                    class="sort-pagination-link {% if data.limit == l %} selected govuk-body govuk-!-font-weight-bold{% else %}govuk-link govuk-link--no-visited-state{% endif %}">
                                    {{ l }}
                                </a>{% if not loop.last %} | {% endif %}
                            {% endfor %}
                        </div>
                <input type="hidden" name="sort" value="{{ data.sort }}">
                <input type="hidden" name="limit" value="{{ data.limit }}">
                <input type="hidden" name="inspectorId" value="{{ data.inspectorId }}">
                <input type="hidden" name="page" value="{{ data.page }}">
            </form>
        </div>
        <form method="post" action="/notify" novalidate>
                <input type="hidden" name="inspectorId" value="{{ data.inspectorId }}">
                <div class="align-right">
                    <div class="govuk-form-group">
                        <label class="govuk-label" for="assignment-date">Event date: </label>
                    </div>
                    <div class="govuk-form-group">
                        <input type="date" class="govuk-input" id="assignment-date" name="assignmentDate">
                    </div>
                    <div class="govuk-form-group">
                        {{ govukButton({
                            text: "Assign selected cases",
                            type: "submit"
                        }) }}
                    </div>
                </div>

            {% include 'views/home/cases-table.njk' %}
            </form>

            {% if cases.length > 0 %}
                <div class="govuk-form-group" style="display: flex; justify-content: space-between; align-items: center; margin: 0; padding: 0;">
                    <div style="margin: 0; padding: 0;">
                        {{ govukPagination(paginationDetails) }}
                    </div>
                </div>
            {% endif %}

        {% endset %}

        {% set mapView %}
            <div class="home-map">
                {{ map(apiKey, cases, inspectorPin) }}
            </div>
        {% endset %}

        {% set inspectorDetails %}
            {% if inspectorPin.id %}
                <div class="pins-container-wide govuk-grid-row">
                    <div class="govuk-grid-column-one-half">
                        <h2 class="govuk-heading-m">{{ inspectorPin.firstName + " " + inspectorPin.lastName }}</h2>
                        <h2 class="govuk-heading-m">Contact details</h2>
                            {{ govukSummaryList({
                                rows: [
                                    { key: { text: "Address" }, value: { text: inspectorPin.address.addressLine1 + ", " + inspectorPin.address.postcode } },
                                    { key: { text: "Work phone" }, value: { text: inspectorPin.inspectorPhone } },
                                    { key: { text: "Mobile phone" }, value: { text: inspectorPin.inspectorPhone  } }
                                ]
                            }) }}

                            <h2 class="govuk-heading-m">Work details</h2>
                            {{ govukSummaryList({
                                rows: [
                                    { key: { text: "Resource group" }, value: { text: "" } },
                                    { key: { text: "Grade" }, value: { text: inspectorPin.grade } },
                                    { key: { text: "FTE" }, value: { text: inspectorPin.fte } },
                                    { key: { text: "Charting officer" }, value: { text: inspectorPin.chartingOfficerId } },
                                    { key: { text: "Charting officer phone" }, value: { text: inspectorPin.chartingOfficerPhone } },
                                    { key: { text: "Inspector manager" }, value: { text: inspectorPin.inspectorManager } }
                                ]
                            }) }}    
                    </div>
                    <div class="govuk-grid-column-one-half govuk-!-margin-top-8">
                        {{ govukTable({
                            caption: "Specialisms",
                            captionClasses: "govuk-table__caption--m",
                            firstCellIsHeader: true,
                            head: [
                                { text: "Name", classes: "govuk-!-width-one-half" },
                                { text: "Proficiency", classes: "govuk-!-width-one-quarter" },
                                { text: "Valid from", classes: "govuk-!-width-one-quarter" }
                            ],
                            rows: [
                                [ { text: "Advertisements" }, { text: "Trained" }, { text: "11/03/24" } ],
                                [ { text: "Appeal against conditions" }, { text: "Trained" }, { text: "17/11/23" } ],
                                [ { text: "General allocation" }, { text: "Trained" }, { text: "12/12/21" } ],
                                [ { text: "Appearance design" }, { text: "Trained" }, { text: "02/06/23" } ],
                                [ { text: "Green belt" }, { text: "Trained" }, { text: "29/11/24" } ],
                                [ { text: "Hearings trained" }, { text: "Trained" }, { text: "01/01/19" } ],
                                [ { text: "Special protection area" }, { text: "Trained" }, { text: "25/08/19" } ]
                                ],
                            classes: 'custom-table-header'
                            }) }}
                    </div>
                </div>
            {% else %}
                <p class="govuk-body"> No Inspector Selected. Please select an Inspector from the drop down to see this information. <p>
            {% endif %}
        {% endset %}

        {% set outlookView %}
        {% if inspectorPin.id %}
            <div class="calendar-container">
                {% if calendarData.error %}
                    <div class="govuk-error-message">
                        <span class="govuk-visually-hidden">Error:</span> {{ calendarData.error }}
                    </div>
                {% else %}
                    <div class="calendar-header">
                        <button onclick="goToToday()">Today</button>
                        <div class="nav-buttons">
                            <button onclick="prevWeek()">&lt;</button>
                            <button onclick="nextWeek()">&gt;</button>
                        </div>
                        <h2>{{weekTitle}}</h2>
                        <label for="weekPicker" class="arrow-button">↓</label>
                        <input type="text" id="weekPicker" placeholder="Select date" readonly>
                    </div>
                    <table class="calendar-table">
                        <thead>
                            <tr>
                                <th class="time-column"></th>
                                {% for date in dateList %}
                                <th>{{date}}</th>
                                {% endfor %}
                            </tr>
                        </thead>
                        <tbody id="calendar-body">
                            {% for i in range(0, calendarGrid.length) %}
                                <tr>
                                        <td class="time-column">
                                            {% if i % 2 == 0 %} {{timeList[i/2]}} {% endif %}
                                        </td>
                                        {% for entry in calendarGrid[i] %}
                                        <td class="calendar-cell"></td>
                                        {% endfor %}
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                {% endif %}
            {% else %}
                <p class="govuk-body"> No Inspector Selected. Please select an Inspector from the drop down to see this information. <p>
            {% endif %}
        </div>
        <script>
            {% if not calendarError %}
            let currentWeek = 0;
            const year = new Date().getFullYear();
            const events = {{ calendarData.events | default([]) | dump | safe}};

            function getCurrentWeek() {
                const today = new Date();
                const startDate = new Date(year, 0, 1);
                while (startDate.getDay() !== 1) {
                    startDate.setDate(startDate.getDate() - 1);
                }
                const diff = Math.floor((today - startDate) / (7 * 24 * 60 * 60 * 1000));
                return diff;
            }

            function generateCalendar(weekOffset) {
                if (events.length === 0) {
                    return;
                }

                const startDate = new Date(year, 0, 1 + (weekOffset * 7));
                while (startDate.getDay() !== 1) {
                    startDate.setDate(startDate.getDate() - 1);
                }

                const weekStartDate = startDate.toLocaleDateString("en-GB");
                const weekEndDate = new Date(startDate);
                weekEndDate.setDate(weekEndDate.getDate() + 4);
                weekEndDate.setHours(23, 59, 59, 999);
                const formattedTitle = `${("0" + startDate.getDate()).slice(-2)}-${("0" + weekEndDate.getDate()).slice(-2)} ${startDate.toLocaleString('en-US', { month: 'long' })}, ${year}`;
                document.getElementById("monthYear").innerText = formattedTitle;

                const headers = ["mon", "tue", "wed", "thu", "fri"];
                for (let i = 0; i < 5; i++) {
                    const day = new Date(startDate);
                    day.setDate(day.getDate() + i);
                    document.getElementById(headers[i]).innerText = `${("0" + day.getDate()).slice(-2)} ${day.toLocaleString('en-US', { weekday: 'short' })}`;
                }

                const tbody = document.getElementById("calendar-body");
                tbody.innerHTML = "";

                for (let hour = 8; hour < 18; hour++) {
                    for (let min of [0, 30]) {
                        const row = document.createElement("tr");
                        const timeCell = document.createElement("td");
                        timeCell.classList.add("time-column");
                        if (min === 0) {
                            timeCell.innerText = `${hour}:00`;
                        } else {
                            timeCell.innerText = ``;
                        }
                        row.appendChild(timeCell);

                        for (let i = 0; i < 5; i++) {
                            const cell = document.createElement("td");
                            cell.classList.add("calendar-cell");
                            row.appendChild(cell);
                        }
                        tbody.appendChild(row);
                    }
                }

                events.forEach(event => {
                    const start = new Date(event.startDateTime);
                    const end = new Date(event.endDateTime);

                    if (start >= startDate && start <= weekEndDate) {
                        const dayIndex = start.getDay() - 1;
                        const startHour = start.getHours();
                        const startMinutes = start.getMinutes();
                        const endHour = end.getHours();
                        const endMinutes = end.getMinutes();

                        const startRow = (startHour - 8) * 2 + (startMinutes === 30 ? 1 : 0);
                        const endRow = (endHour - 8) * 2 + (endMinutes === 30 ? 0 : -1);

                        let backgroundColor = "lightblue";
                        if (event.subject.includes("Planning")) {
                            backgroundColor = "lightblue";
                        } else if (event.subject.includes("Site Visit")) {
                            backgroundColor = "lightcoral";
                        } else if (event.subject.includes("Report")) {
                            backgroundColor = "lightgrey";
                        }

                        const rows = tbody.querySelectorAll("tr");
                        const validStartRow = Math.max(0, startRow);
                        for (let i = validStartRow; i <= endRow && i < rows.length; i++) {
                            const cell = rows[i].children[dayIndex + 1];
                            cell.style.backgroundColor = backgroundColor;

                            if (i === startRow) {
                                cell.innerText = event.subject;
                            } else {
                                cell.innerText = "";
                            }
                        }
                    }
                });
            }

            function prevWeek() {
                if (currentWeek > 0) {
                    currentWeek--;
                    generateCalendar(currentWeek);
                }
            }

            function nextWeek() {
                if (currentWeek < 51) {
                    currentWeek++;
                    generateCalendar(currentWeek);
                }
            }

            function goToToday() {
                currentWeek = getCurrentWeek();
                generateCalendar(currentWeek);
            }

            document.addEventListener("DOMContentLoaded", function() {
                currentWeek = getCurrentWeek();
                generateCalendar(currentWeek);

            });
            {% endif %}
        </script>
        {% endset %}

        {{ govukTabs({
            items: [
                {
                    label: "Cases",
                    id: "cases",
                    panel: { html: casesTable }
                },
                {
                    label: "Map view",
                    id: "mapView",
                    panel: { html: mapView }
                },
                {
                    label: "Inspector personal details",
                    id: "inspector",
                    panel: { html: inspectorDetails }
                },
                {
                    label: "Inspector calendar",
                    id: "outlookView",
                    panel: { html: outlookView }
                }
            ]
        }) }}
    </div>
</div>
<script {% if cspNonce %}nonce={{ cspNonce }}{% endif %}>
    document.addEventListener('DOMContentLoaded', function () {
        const selectAllCheckbox = document.querySelector('#select-all');
        const checkboxes = document.querySelectorAll('input[type="checkbox"][name="selectedCases"]');

        selectAllCheckbox.addEventListener('change', function () {
            checkboxes.forEach(checkbox => {
                document.dispatchEvent(new CustomEvent('caseStateChange', {
                    detail: {
                        caseId: checkbox.value,
                        selected: selectAllCheckbox.checked
                    }
                }));
            });
        });

        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function () {
              console.debug('case checkbox value changed:', checkbox.value, checkbox.checked);
              document.dispatchEvent(new CustomEvent('caseStateChange', {
                detail: {
                  caseId: checkbox.value,
                  selected: checkbox.checked
                }
              }));
            });
        });

        document.addEventListener('caseStateChange', function (event) {
            const { caseId, selected } = event.detail;
            console.debug('caseStateChange, syncing checkbox state', caseId, selected);

            document.querySelector(`input[type="checkbox"][name="selectedCases"][value="${caseId}"]`).checked = selected;
        });

        document.querySelectorAll('.sort-pagination-link').forEach(link => {
            link.addEventListener('click', e => {
                e.preventDefault();

                const sortPaginationForm = document.getElementById('sort-pagination-form');
                const filterForm = document.getElementById('filter-form');
                if (!sortPaginationForm || !filterForm) return;

                // Copy inputs from the filter form whose name attrs start with 'filters[' into sort form
                const filterInputs = filterForm.querySelectorAll('input[name^="filters["]');
                filterInputs.forEach(input => {
                    const clone = document.createElement('input');
                    clone.type = 'hidden';
                    clone.name = input.name;
                    clone.value = input.value;
                    sortPaginationForm.appendChild(clone);
                });

                if(e.target?.dataset?.sort){
                    const sortInput = sortPaginationForm.querySelector('input[name="sort"]');
                    //don't reload page if no change
                    if(sortInput.value === e.target?.dataset?.sort) return;
                    sortInput.value = e.target?.dataset?.sort || '';
                }else if(e.target?.dataset?.limit){
                    const limitInput = sortPaginationForm.querySelector('input[name="limit"]');
                    //don't reload page if no change
                    if(limitInput.value === e.target?.dataset?.limit) return;
                    limitInput.value = e.target?.dataset?.limit || '';
                }

                sortPaginationForm.submit();
            })
        });

    });
</script>
{% endblock %}