generator client {
  provider = "prisma-client-js"
  output   = "./client" // set the output directory for the generated Prisma Client, to support v7
}

datasource db {
  provider = "sqlserver"
  url      = env("SQL_CONNECTION_STRING_ADMIN")
}

// NOTES
//
// use '//' comments for notes relevant to the schema
// use '///' comments for notes that should be included in the types definition
// see https://www.prisma.io/docs/concepts/components/prisma-schema#comments
//
// we use GUIDs for IDs (see https://learn.microsoft.com/en-us/sql/t-sql/data-types/uniqueidentifier-transact-sql?view=sql-server-ver16)
// this is because these IDs may be used in URLs and it makes them harder to guess
// while we don't rely on that for security, it adds an extra layer
// not everything needs this, but easier to make them all consistent and the increase in size (vs int) is negligible

/// an appeal case, using only required PINS data-model fields
/// see https://github.com/Planning-Inspectorate/data-model/
model AppealCase {
  caseReference                  String  @id
  caseStatus                     String?
  caseType                       String?
  caseProcedure                  String?
  originalDevelopmentDescription String?
  allocationLevel                String?
  allocationBand                 Int?

  siteAddressLine1    String?
  siteAddressLine2    String?
  siteAddressTown     String?
  siteAddressCounty   String?
  siteAddressPostcode String?

  // not data model fields but populated from OS Places API
  // 6 d.p. is approx 10cm precision!
  // see https://gis.stackexchange.com/questions/8650/measuring-accuracy-of-latitude-and-longitude
  // values must use the WGS84 coordinate system
  siteAddressLatitude  Decimal? @db.Decimal(9, 6)
  siteAddressLongitude Decimal? @db.Decimal(9, 6)

  lpaCode   String?
  // not data-model fields but may be populated from C-BOS
  lpaName   String?
  lpaRegion String?

  caseCreatedDate      DateTime?
  caseValidDate        DateTime?
  finalCommentsDueDate DateTime?

  linkedCaseStatus  String?
  leadCaseReference String?

  appellantCostsAppliedFor Boolean?
  lpaCostsAppliedFor       Boolean?

  inspectorId String? // assigned inspector

  Events      AppealEvent[]
  Specialisms AppealCaseSpecialism[]
}

model AppealCaseSpecialism {
  id            String @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  caseReference String
  specialism    String

  AppealCase AppealCase @relation(fields: [caseReference], references: [caseReference], onDelete: Cascade)
}

/// an appeal event, using only required PINS data-model fields
/// see https://github.com/Planning-Inspectorate/data-model/blob/main/schemas/appeal-event.schema.json
model AppealEvent {
  id                 String    @unique
  caseReference      String
  eventType          String
  eventName          String?
  eventStatus        String
  eventStartDateTime DateTime
  eventEndDateTime   DateTime?

  addressLine1    String?
  addressLine2    String?
  addressTown     String?
  addressCounty   String?
  addressPostcode String?

  AppealCase AppealCase @relation(fields: [caseReference], references: [caseReference], onDelete: Cascade)
}

/// The poll status to track when the latest appeal cases were fetched
/// this will be used for caching purposes, to determine if the cache needs to be refreshed
model AppealCasePollStatus {
  id           Int      @id @default(autoincrement())
  lastPollAt   DateTime @updatedAt
  casesFetched Int
}

model Inspector {
  id        String @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  firstName String
  lastName  String

  postcode  String?
  // not data model fields but populated from OS Places API
  // 6 d.p. is approx 10cm precision!
  // see https://gis.stackexchange.com/questions/8650/measuring-accuracy-of-latitude-and-longitude
  // values must use the WGS84 coordinate system
  latitude  Decimal? @db.Decimal(9, 6)
  longitude Decimal? @db.Decimal(9, 6)

  grade   String?
  email   String?
  entraId String? // to link with logged in user

  Specialisms InspectorSpecialism[]
}

model InspectorSpecialism {
  id          String    @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  inspectorId String    @db.UniqueIdentifier
  name        String
  proficiency String?
  validFrom   DateTime?

  Inspector Inspector @relation(fields: [inspectorId], references: [id], onDelete: Cascade)
}
